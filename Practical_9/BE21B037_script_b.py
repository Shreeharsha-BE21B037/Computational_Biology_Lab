# -*- coding: utf-8 -*-
"""CBL9a.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LCEe7fHw8pbUJiAdhg4Hlln24AdfladT
"""

#Importing Required Packages for The Analysis
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
plt.style.use("seaborn-v0_8-whitegrid")

#Importing The Dataset
data_df = pd.read_csv('/content/Tissue_Comp.csv')
other_data = pd.read_csv('/content/Gtex_metadata_tissue.csv')
Gene = data_df.iloc[:,0]
data_df

#Mean Centering Data
scaled_data = data_df.iloc[:,1:]+np.ones(data_df.iloc[:,1:].shape)
mean = scaled_data.mean(axis=1)
for i in range (scaled_data.shape[0]):
  scaled_data.iloc[i,:] = (scaled_data.iloc[i,:]-mean[i])/mean[i]
scaled_data = pd.concat([Gene,scaled_data],axis=1)
scaled_data.head()

plt.figure(figsize=(13,5))
plt.subplot(1, 2, 1)
plt.boxplot(data_df.iloc[:,1:])
plt.title("Box Plot Before Mean Scaling",size = 15)
plt.xlabel('Sample',size = 12)
plt.ylabel('Count Value',size = 12)
plt.subplot(1, 2, 2)
plt.boxplot(scaled_data.iloc[:,1:])
plt.title("Box Plot After Mean Scaling",size = 15)
plt.xlabel('Sample',size = 12)
plt.ylabel('Count Value',size = 12)
plt.savefig('Scaling.png')
plt.show()

sample = scaled_data.iloc[:,1:].T.reset_index()
sample.columns = ["Tissue"] + [Gene[i] for i in range(0,54592)]
sample['Tissue'] = ["Liver","Liver","Lung","Lung","Pancreas","Pancreas","Ovary","Ovary"]
sample

sample_df = sample.iloc[:,1:]
pca = PCA() #Initializing the class
pca.fit(sample_df)

pca.components_

np.round(pca.components_@pca.components_.T)

pca.singular_values_

pca.explained_variance_ratio_

ax = sns.barplot(y = np.round(pca.explained_variance_ratio_*100,1),
              x = [f'{i+1}' for i in range(sample_df.shape[0])],color='dodgerblue')

ax.bar_label(ax.containers[0], fontsize=10);
plt.title('Explained variance of the components', size=18)
plt.xlabel('Principal Components', size=15)
plt.ylabel('% Explained Variance', size=15)
plt.grid(True,color='whitesmoke',linewidth = 1.25)
plt.savefig('Explained_variance.png')
plt.show()

#Transforming data to lower dimensions
transformed_sample_data = pca.transform(sample_df)

# Creating a dataframe for plotting
transformed_sample = pd.DataFrame(data = transformed_sample_data, columns=[f'Principal Component {i+1}' for i in range(sample_df.shape[0])])
transformed_sample['Tissue'] = sample['Tissue']
transformed_sample

# PCA Score Plot

fig, ax = plt.subplots(figsize=(5,5))
sns.scatterplot(
    data = transformed_sample,
    x='Principal Component 1',
    y='Principal Component 2',
    hue = 'Tissue',
    s=100
)
plt.axhline(y=0, color='black', linestyle='-') # Add horizontal and vertical axis lines
plt.axvline(x=0, color='black', linestyle='-') # Add horizontal and vertical axis lines
ax.set_xlabel(f"PC1 - {pca.explained_variance_ratio_[0]*100:.2f}%",size = 12)
ax.set_ylabel(f"PC2 - {pca.explained_variance_ratio_[1]*100:.2f}%",size = 12)
ax.set_title("PCA Score Plot", size = 15)

plt.savefig('PCA_Score.png')
plt.show()

Loadings = pca.components_.T * np.sqrt(pca.explained_variance_);
Loadings = pd.DataFrame(
    Loadings, columns=[f'Principal Component {i+1}' for i in range(sample_df.shape[0])], index=sample_df.columns)
Loadings.head()

Sorted_loadings = Loadings['Principal Component 1'].sort_values(ascending=False)
ax = sns.barplot(y = np.round(Sorted_loadings[0:10],3),
              x = [f'{Sorted_loadings.index[i]}' for i in range(10)],color='dodgerblue')

ax.bar_label(ax.containers[0], fontsize=10);
plt.title('Loadings for PC 1', size=18)
plt.xlabel('Genes', size=15)
plt.xticks(rotation=75)
plt.ylabel('Loadings', size=15)
plt.grid(True,color='whitesmoke',linewidth = 1.25)
plt.savefig('Loadings_PC1.png')
plt.show()